//Count pairs from two sorted matrices with given sum
// Time Complexity - O(n^2(logn))

import java.util.*;

public class Practice {

	public static int findrow(int mat[][], int l, int h, int x) {

		while (l <= h) {
			int mid = (l + h) / 2;

			if (mat[mid][0] <= x) {
				l = mid + 1;
			} else {
				h = mid - 1;
			}
		}
		return h;

	}

	public static boolean findCol(int mat[][], int l, int h, int val, int row) {

		while (l <= h) {
			int mid = (l + h) / 2;

			if (mat[row][mid] == val)
				return true;
			if (mat[row][mid] <= val) {
				l = mid + 1;
			} else {
				h = mid - 1;
			}
		}
		return false;

	}

	public static boolean searchValue(int mat[][], int n, int x) {
		int row = findrow(mat, 0, n - 1, x);

		if (row == -1)
			return false;

		return findCol(mat, 0, n - 1, x, row);
	}

	static int countPairs(int mat1[][], int mat2[][], int n, int x) {

		int count = 0;

		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++) {

				if (searchValue(mat2, n, x - mat1[i][j]))
					count++;
			}

		return count;
	}

	public static void main(String[] args) {
		
		int mat1[][] = { { 1, 5, 6 }, { 8, 10, 11 }, { 15, 16, 18 } };

		int mat2[][] = { { 2, 4, 7 }, { 9, 10, 12 }, { 13, 16, 20 } };

		int n = 3;
		int x = 21;

		System.out.println("Count = " + countPairs(mat1, mat2, n, x));
	}
}
