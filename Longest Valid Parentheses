//Longest Valid Parentheses
TC-> O(n^3)
class Solution {
    
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push('(');
            } else if (!stack.empty() && stack.peek() == '(') {
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.empty();
    }
    
    public int longestValidParentheses(String s) {
        
        if(s==null || s.length()==0)
            return 0;
        
        int max_length=0;
        for(int i=0;i<s.length()-1;i++){
            
            for(int j=i+1;j<s.length();j++){
                
                if(isValid(s.substring(i,j+1))){
                    
                    if(max_length<(j-i+1)){
                        max_length = j-i+1;
                    }
                }
            }
        }
        return max_length;
    }
}

// TC-> O(n)
// SC-> O(n)
class Solution {
    public int longestValidParentheses(String s) {
        if(s==null || s.length()==0)
            return 0;
        int max_length=0;
    	Stack<Integer> st = new Stack<Integer>();
    	st.push(-1);
    	for(int i=0;i<s.length();i++) {
    		char ch = s.charAt(i);
    		if(ch=='(') {
    			st.push(i);
    		}else {
    			st.pop();
    			if(st.isEmpty()) {
    				st.push(i);
    			}else {
    				max_length = Math.max(max_length, i-st.peek());
    			}
    		}
    	}
    	return max_length;
    }
}
// TC-> O(n)
// SC-> O(1)
class Solution {
    public int longestValidParentheses(String s) {
        if(s==null || s.length()==0)
            return 0;
       int left=0;
    	int right=0;
    	int max_length=0;
    	for(int i=0;i<s.length();i++) {
    		
    		char ch = s.charAt(i);
    		if(ch=='(') {
    			left++;
    		}else {
    			right++;
    		}
    		if(left==right) {
    			max_length=Math.max(max_length,2* right);
    		}
    		else if(right>=left) {
    			left=right=0;
    		}
    	}
    	
    	left=right=0;
    	
        for(int i=s.length()-1;i>=0;i--) {
    		
    		char ch = s.charAt(i);
    		if(ch=='(') {
    			left++;
    		}else {
    			right++;
    		}
    		if(left==right) {
    			max_length=Math.max(max_length, 2*left);
    		}
    		else if(left>=right) {
    			left=right=0;
    		}
    	}
        return max_length;
    }
}
