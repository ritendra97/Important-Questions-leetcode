// According to leetcode 
//TC-> O(nlogn)
class MedianFinder {

    /** initialize your data structure here. */
    PriorityQueue<Integer> left;
	PriorityQueue<Integer> right;
    
    public MedianFinder() {
    
        left = new PriorityQueue<Integer>(Collections.reverseOrder());
		right = new PriorityQueue<Integer>();
        
    }
    
    public void addNum(int val) {
        
        if(left.isEmpty() ||val<=left.peek()) {
			left.add(val);
		}else {
			right.add(val);
		}
		
		if(left.size()>right.size()+1) {
			
			right.add(left.remove());
		}else if(right.size()>left.size()) {
			
			left.add(right.remove());
		}
    }
    
    public double findMedian() {
    
		if(left.size()==right.size())
			return (double)(left.peek()+right.peek())/2;
		else
			return (double) left.peek();
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
 
// According to pepcoding
import java.util.*;
public class Solution {
	
	PriorityQueue<Integer> left;
	PriorityQueue<Integer> right;
	
	public void medianPriorityQueue() {
		
		left = new PriorityQueue<Integer>(Collections.reverseOrder());
		right = new PriorityQueue<Integer>();
	}
	public void add(int val) {
		
		if(right.size()>0 && val>right.peek()) {
			right.add(val);
		}else {
			left.add(val);
		}
		
		if(left.size()-right.size()==2) {
			
			right.add(left.remove());
		}else if(right.size()-left.size()==2) {
			
			left.add(right.remove());
		}
			
	}
	public int remove() {
		
		if(this.size()==0)
			return -1;
		else if(left.size()>=right.size())
			return left.remove();
		else
			return right.remove();
	}
	public int peak() {
		
		if(this.size()==0)
			return -1;
		else if(left.size()>=right.size())
			return left.peek();
		else
			return right.peek();
		
	}
	public int size() {
		
		return left.size();
	}
	public static void main(String[] args) {

		Solution sb = new Solution();
		int A[] = {2,3,4};
		
		sb.medianPriorityQueue();
		for(int i=0;i<A.length;i++) {
			
			sb.add(A[i]);
		}
		System.out.println(sb.size());
	}

}
