//Trapping Rain Water

TC-> O(n^2);
SC-> O(1);

class Solution {
    public int trap(int[] height) {
               
        if(height.length==0)
            return 0;
        
        int n = height.length;
        int left_height = 0;
        int right_height = 0;
        int max_water = 0;
        
        for(int i=0;i<n;i++){
            
            left_height= height[i];
            for(int j=0;j<=i;j++){
                left_height = Math.max(left_height,height[j]);
            }
            
            right_height = height[i];
            for(int j=i+1;j<n;j++){
                right_height = Math.max(right_height,height[j]);
            }
            
            max_water = max_water+(Math.min(left_height,right_height)-height[i]);
        }
        
        return max_water;
    }
}
TC-> O(n)
SC-> O(n)

Solve by dynamic programming managed left_max array and right_max array and subtract it by height[] array 
Math.min(left_max, right_max)-height[i];



// best approach
TC-> O(n)
SC-> O(1)

class Solution {
    public int trap(int[] height) {
       
        
        if(height.length==0)
            return 0;
        
        int n            = height.length;
        int left_height  = 0;
        int right_height = 0;
        int max_water    = 0;
        int lo           = 0;
        int rh           = n-1;
        
        while(lo<rh){
         
            if(left_height<height[lo]){
                left_height = height[lo];
            } 
            if(right_height<height[rh]){
                right_height = height[rh];
            }
            
            if(left_height<right_height){
                max_water+=(left_height-height[lo]);
                lo = lo+1;
            }else{
                max_water+=(right_height-height[rh]);
                rh = rh-1;
            }
        }
        return max_water;
    }
}
