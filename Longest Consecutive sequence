// Time complexity O(nlogn)
class Solution {
    public static int longestConsecutive(int[] nums) {
    	
        int max_length =  1;
        int length =1;
        
        if(nums.length==0)
            return 0;
        if(nums.length==1)
            return 1;
        
		Arrays.sort(nums);
		for(int i=1;i<nums.length;i++) {
			
			if(nums[i]!=nums[i-1]) {
				 if(nums[i]==(nums[i-1])+1) {
					 length++; 
				 }else {
				
                max_length = Math.max(max_length, length);
                     length=1;
			 }
				
		  }
		}
		return Math.max(max_length,length);
    }
}

TC = O(n)
SC = O(n)

class Solution {
    public static int longestConsecutive(int[] nums) {
    	
        int curr_num = 0;
        int max_length =0;
        int longest_length=0;
        
        HashSet<Integer> set  = new HashSet<Integer>();
         for (int num : nums) {
            set.add(num);
        }
        for(int num:set){
            if(!set.contains(num-1)){
                curr_num = num;
                longest_length=1;
            
                while(set.contains(curr_num+1)){
                    curr_num++;
                    longest_length++;
               }
            }    
            max_length = Math.max(max_length,longest_length);
        }
        return max_length;
    }
}
