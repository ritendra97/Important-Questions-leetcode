// Brute Force manner
// overflow condition occurring in it 
import java.util.*;
public class StackProblem 
{
	public static boolean compound(String s1,String s2) {
		
		String a=""; 
		String b="";
		a+=s1+s2;
		b+=s2+s1;
		if(Integer.parseInt(a)>Integer.parseInt(b))
			return true;
		else
			return false;
	}
	public static String largestNumber(int[] nums) {
        
		if(nums.length==0)
			return new String();
		if(nums.length==1)
			return String.valueOf(nums[0]);
		int i=0;
		while(i<nums.length-1) {
			
			for(int j=i+1;j<nums.length;j++) {
				
				if(compound(String.valueOf(nums[i]),String.valueOf(nums[j]))){
					continue;
				}else {
					int temp = nums[i];
					nums[i] = nums[j];
					nums[j] = temp;
				}
			}
			i++;
		}
		
		String ans="";
		for(int k:nums) {
			ans+=k;
		}
		return ans;
    }
	public static void main(String[] args) {
		
		int nums[] = {1,9,8,78,25,333};
		System.out.println(largestNumber(nums));
	}
}
// optimized solution
//TC-> O(nlogn)
class Solution {
    
	public static String largestNumber(int[] nums) {
    
        int n = nums.length;
        String strs[] = new String[n];
        
        for(int i=0;i<n;i++){
            
            strs[i] = nums[i]+"";
        }
        Arrays.sort(strs, new Comparator<String>(){
            
            public int compare(String i,String j){
                String a = i+j;
                String b = j+i;
                return (a).compareTo(b);
            }
        });
            
        if (strs[strs.length-1].charAt(0) == '0') return "0";
        String res = new String();
        for (int i = 0; i < strs.length; i++) {
            res = strs[i]+res;
        }
        return res;    
    }
}
