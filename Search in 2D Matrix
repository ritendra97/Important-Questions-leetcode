class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        if(matrix.length==0)
            return true;
        int n = matrix[0].length;
        int m = matrix.length;
        int l = 0;
        int r = n*m-1;
        
        for(int i=0;i<m;i++){
            
            if(matrix[i][0]>target)
                continue;
            else{
                l=0;
                r=n-1;
            }
            while(l<=r){
               int mid = l+(r-l)/2;
              
               if(matrix[i][mid]==target)
                   return true;
               if(matrix[i][mid]<target)
                   l=mid+1;
               else
                   r=mid-1;
            }
        }
        return false;
        
    }
}

Time Complexity O(n)
Space Complexity O(1)

import java.util.*;

public class Practice {
	public static boolean searchMatrix(int[][] matrix, int target) {
		
		int l = 0;
		int r = matrix.length-1;
		
		while(l<matrix.length && r>=0) {
			if(matrix[l][r]==target) {
				return true;
			}
			if(matrix[l][r]>target) {
				r--;
			}else {
				l++;
			}
		}
		
		return false;

	}

	public static void main(String[] args) {

		int mat[][] = { { 10, 20, 30, 40 }, { 15, 25, 35, 45 }, { 27, 29, 37, 48 }, { 32, 33, 39, 50 } };

		System.out.println(searchMatrix(mat, 19));
	}
}
