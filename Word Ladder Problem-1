//Word Ladder Problem-1
TC-> O(n2m)
SC-> O(m*n) 
import java.util.*;

class Solution {
    
    public static void wordMatching(String word, Queue<String> q,HashMap<String, Boolean> map){
        
        
        for(int i=0;i<word.length();i++){
        	
        	char checker[] = word.toCharArray();
            
        	for(int j=0;j<26;j++){
                
                checker[i] = (char)(j+'a');
                String s = String.valueOf(checker);
                
                if(map.containsKey(s) && map.get(s)==false){
                    q.add(s);
                    map.put(s,true);
                }
            }
        }
    }

    public static int ladderLength(String beginWord, String endWord, List<String> wordList) {
     
        HashMap<String, Boolean> map = new HashMap<String,Boolean>();
        
        for(int i=0;i<wordList.size();i++){
            
            map.put(wordList.get(i),false);
        }
        
        
        int length=0;
        
        Queue<String> q = new LinkedList<>();
        q.add(beginWord);
        
        map.put(beginWord,true);
        
        while(!q.isEmpty()){
            
            while(true){
                
                int size = q.size();
                
                if(size==0)
                    break;
                
                length++;
                
                while(size>0){
                 
                    String check = q.poll();
                    
                    if(check.equals(endWord))
                        return length;
                    
                    wordMatching(check,q,map);
                    
                    size--;
                }
            }
        }
        return -1;
    }
    
    public static void main(String [] args) {
    	
    	List<String> wordList = new ArrayList<String>();
    	
    	String arr[] = {"hot","dot","dog","lot","log","cog"};
    	
    	for(int i=0;i<arr.length;i++) {
    		wordList.add(arr[i]);
    	}
    	
    	String beginWord = "hit";
    	String endWord = "cog";
    	
    	System.out.println(ladderLength(beginWord, endWord,wordList));
    }
}
