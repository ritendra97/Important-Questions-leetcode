//Wildcard Matching
class Solution {
    public boolean isMatch(String s, String p) {
        
        return match(s, p, s.length()-1, p.length()-1);
    }
    
    static boolean match(String s, String p, int i, int j){
    
        if( i <= -1 && j <= -1) return true;
        
        if( i < 0 && j >= 0)            
            if( p.charAt(j) == '*')
                return match(s, p, i, j-1);

        
        if( ( i >= 0 && j < 0 )  || (i < 0 && j >= 0 ) )  return false;
        
        
        if( s.charAt(i) == p.charAt(j)   || p.charAt(j) == '?')
            return match(s, p, i-1, j-1);
        
        boolean f = false;
        
        if( p.charAt(j) == '*'){
            for(int k = i; k >=-1; k-- ){
                f = f || match(s, p , k ,j-1);   
                if( f )
                    return true;
            }
                
        }
        
        return f;
    }
}

TC-> O(m*n)
class Solution {
    
    public static boolean isMatch(String s, String p) {
		
		boolean[][] dp = new boolean[s.length() + 1][p.length() + 1 ];//<-this is row
		dp[0][0] = true;

		for (int i = 1; i <= p.length(); i++) {
		  if (p.charAt(i - 1) == '*') {
			dp[0][i] = dp[0][i - 1];
		  }
		}

		for (int i = 1; i <= s.length(); i++) {
		  for (int j = 1; j <= p.length(); j++) {
			char sch = s.charAt(i - 1);
			char pch = p.charAt(j - 1);

			if (sch == pch || pch == '?') {
			  dp[i][j] = dp[i - 1][j - 1];
			} else if (pch == '*') {
			  dp[i][j] = dp[i - 1][j - 1] || dp[i][j - 1] || dp[i - 1][j];
			}
		  }
		}

		return dp[s.length()][p.length()];
    }
}
